// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowProjectVoteApi.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AdditionalScenariosForEdgeCasesFeature : object, Xunit.IClassFixture<AdditionalScenariosForEdgeCasesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Vote2.feature"
#line hidden
        
        public AdditionalScenariosForEdgeCasesFeature(AdditionalScenariosForEdgeCasesFeature.FixtureData fixtureData, SpecFlowProjectVoteApi_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Additional Scenarios for Edge Cases", "Gestion des cas particuliers non couverts dans les critères initiaux", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
    #line hidden
#line 5
        testRunner.Given("I have a scrutin system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Égalité entre 2ème et 3ème candidat au premier tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Additional Scenarios for Edge Cases")]
        [Xunit.TraitAttribute("Description", "Égalité entre 2ème et 3ème candidat au premier tour")]
        public virtual void EgaliteEntre2EmeEt3EmeCandidatAuPremierTour()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Égalité entre 2ème et 3ème candidat au premier tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table11.AddRow(new string[] {
                            "Alice"});
                table11.AddRow(new string[] {
                            "Bob"});
                table11.AddRow(new string[] {
                            "Charlie"});
                table11.AddRow(new string[] {
                            "David"});
#line 8
        testRunner.Given("I have candidates:", ((string)(null)), table11, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table12.AddRow(new string[] {
                            "Alice",
                            "40"});
                table12.AddRow(new string[] {
                            "Bob",
                            "25"});
                table12.AddRow(new string[] {
                            "Charlie",
                            "25"});
                table12.AddRow(new string[] {
                            "David",
                            "10"});
#line 14
        testRunner.And("the votes are:", ((string)(null)), table12, "And ");
#line hidden
#line 20
        testRunner.When("I close the scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
        testRunner.And("I calculate the result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
        testRunner.Then("there should be no winner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
        testRunner.And("a second round should be required", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
        testRunner.And("the qualified candidates should be \"Alice\", \"Bob\" and \"Charlie\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Gestion du vote blanc")]
        [Xunit.TraitAttribute("FeatureTitle", "Additional Scenarios for Edge Cases")]
        [Xunit.TraitAttribute("Description", "Gestion du vote blanc")]
        public virtual void GestionDuVoteBlanc()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gestion du vote blanc", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 26
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table13.AddRow(new string[] {
                            "Alice"});
                table13.AddRow(new string[] {
                            "Bob"});
                table13.AddRow(new string[] {
                            "Vote Blanc"});
#line 27
        testRunner.Given("I have candidates:", ((string)(null)), table13, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table14.AddRow(new string[] {
                            "Alice",
                            "30"});
                table14.AddRow(new string[] {
                            "Bob",
                            "25"});
                table14.AddRow(new string[] {
                            "Vote Blanc",
                            "45"});
#line 32
        testRunner.And("the votes are:", ((string)(null)), table14, "And ");
#line hidden
#line 37
        testRunner.When("I close the scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
        testRunner.And("I calculate the result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
        testRunner.Then("there should be no winner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
        testRunner.And("a second round should be required", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
        testRunner.And("the qualified candidates should be \"Alice\" and \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Vote blanc majoritaire au deuxième tour - candidat valide gagne")]
        [Xunit.TraitAttribute("FeatureTitle", "Additional Scenarios for Edge Cases")]
        [Xunit.TraitAttribute("Description", "Vote blanc majoritaire au deuxième tour - candidat valide gagne")]
        public virtual void VoteBlancMajoritaireAuDeuxiemeTour_CandidatValideGagne()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vote blanc majoritaire au deuxième tour - candidat valide gagne", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 43
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table15.AddRow(new string[] {
                            "Alice"});
                table15.AddRow(new string[] {
                            "Bob"});
                table15.AddRow(new string[] {
                            "Vote Blanc"});
#line 44
        testRunner.Given("I have a second round with candidates:", ((string)(null)), table15, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table16.AddRow(new string[] {
                            "Alice",
                            "40"});
                table16.AddRow(new string[] {
                            "Bob",
                            "25"});
                table16.AddRow(new string[] {
                            "Vote Blanc",
                            "60"});
#line 49
        testRunner.And("the votes are:", ((string)(null)), table16, "And ");
#line hidden
#line 54
        testRunner.When("I close the scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
        testRunner.And("I calculate the result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
        testRunner.Then("the winner should be \"Alice\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Égalité entre tous les candidats au 2ème tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Additional Scenarios for Edge Cases")]
        [Xunit.TraitAttribute("Description", "Égalité entre tous les candidats au 2ème tour")]
        public virtual void EgaliteEntreTousLesCandidatsAu2EmeTour()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Égalité entre tous les candidats au 2ème tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 58
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table17.AddRow(new string[] {
                            "Alice"});
                table17.AddRow(new string[] {
                            "Bob"});
                table17.AddRow(new string[] {
                            "Charlie"});
#line 59
    testRunner.Given("I have a second round with candidates:", ((string)(null)), table17, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table18.AddRow(new string[] {
                            "Alice",
                            "30"});
                table18.AddRow(new string[] {
                            "Bob",
                            "30"});
                table18.AddRow(new string[] {
                            "Charlie",
                            "30"});
#line 64
    testRunner.And("the votes are:", ((string)(null)), table18, "And ");
#line hidden
#line 69
    testRunner.When("I close the scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
    testRunner.And("I calculate the result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    testRunner.Then("there should be no winner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
    testRunner.And("there should be a tie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AdditionalScenariosForEdgeCasesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AdditionalScenariosForEdgeCasesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
